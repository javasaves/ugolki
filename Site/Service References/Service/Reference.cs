//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Site.Service {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Vector2", Namespace="http://schemas.datacontract.org/2004/07/UgolkiService")]
    [System.SerializableAttribute()]
    public partial struct Vector2 : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Move", Namespace="http://schemas.datacontract.org/2004/07/UgolkiService")]
    [System.SerializableAttribute()]
    public partial class Move : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Site.Service.Vector2[] PathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PlayerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Site.Service.Vector2[] Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Player {
            get {
                return this.PlayerField;
            }
            set {
                if ((this.PlayerField.Equals(value) != true)) {
                    this.PlayerField = value;
                    this.RaisePropertyChanged("Player");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Microsoft.ServiceModel.Samples", ConfigurationName="Service.IUgolkiService", CallbackContract=typeof(Site.Service.IUgolkiServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IUgolkiService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IUgolkiService/GetClientsCount", ReplyAction="http://Microsoft.ServiceModel.Samples/IUgolkiService/GetClientsCountResponse")]
        int GetClientsCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IUgolkiService/GetClientsCount", ReplyAction="http://Microsoft.ServiceModel.Samples/IUgolkiService/GetClientsCountResponse")]
        System.Threading.Tasks.Task<int> GetClientsCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IUgolkiService/GetMoves", ReplyAction="http://Microsoft.ServiceModel.Samples/IUgolkiService/GetMovesResponse")]
        System.Collections.Generic.Dictionary<Site.Service.Move, double> GetMoves(int[][] cells, int player, int steps, Site.Service.Vector2 playerPoint, int secondPlayer, bool first);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IUgolkiService/GetMoves", ReplyAction="http://Microsoft.ServiceModel.Samples/IUgolkiService/GetMovesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<Site.Service.Move, double>> GetMovesAsync(int[][] cells, int player, int steps, Site.Service.Vector2 playerPoint, int secondPlayer, bool first);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IUgolkiService/Connect", ReplyAction="http://Microsoft.ServiceModel.Samples/IUgolkiService/ConnectResponse")]
        void Connect();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IUgolkiService/Connect", ReplyAction="http://Microsoft.ServiceModel.Samples/IUgolkiService/ConnectResponse")]
        System.Threading.Tasks.Task ConnectAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUgolkiServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IUgolkiService/FindMoves", ReplyAction="http://Microsoft.ServiceModel.Samples/IUgolkiService/FindMovesResponse")]
        System.Collections.Generic.Dictionary<Site.Service.Move, double> FindMoves(int[][] cells, int player, int steps, Site.Service.Vector2 playerPoint, int secondPlayer, bool first);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IUgolkiService/FindMovesStart", ReplyAction="http://Microsoft.ServiceModel.Samples/IUgolkiService/FindMovesStartResponse")]
        System.Collections.Generic.Dictionary<Site.Service.Move, double> FindMovesStart(Site.Service.Move[] startMoves, int[][] cells, int player, int steps, Site.Service.Vector2 playerPoint, int secondPlayer, bool first);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IUgolkiService/Test", ReplyAction="http://Microsoft.ServiceModel.Samples/IUgolkiService/TestResponse")]
        int Test();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUgolkiServiceChannel : Site.Service.IUgolkiService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UgolkiServiceClient : System.ServiceModel.DuplexClientBase<Site.Service.IUgolkiService>, Site.Service.IUgolkiService {
        
        public UgolkiServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public UgolkiServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public UgolkiServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public UgolkiServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public UgolkiServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int GetClientsCount() {
            return base.Channel.GetClientsCount();
        }
        
        public System.Threading.Tasks.Task<int> GetClientsCountAsync() {
            return base.Channel.GetClientsCountAsync();
        }
        
        public System.Collections.Generic.Dictionary<Site.Service.Move, double> GetMoves(int[][] cells, int player, int steps, Site.Service.Vector2 playerPoint, int secondPlayer, bool first) {
            return base.Channel.GetMoves(cells, player, steps, playerPoint, secondPlayer, first);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<Site.Service.Move, double>> GetMovesAsync(int[][] cells, int player, int steps, Site.Service.Vector2 playerPoint, int secondPlayer, bool first) {
            return base.Channel.GetMovesAsync(cells, player, steps, playerPoint, secondPlayer, first);
        }
        
        public void Connect() {
            base.Channel.Connect();
        }
        
        public System.Threading.Tasks.Task ConnectAsync() {
            return base.Channel.ConnectAsync();
        }
    }
}
